package tn.esprit.Controllers;

import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import javafx.util.Duration;
import tn.esprit.Entities.Utilisateur;
import tn.esprit.Services.UtilisateurService;
import tn.esprit.Utils.SessionManager;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

public class DashController {

    @FXML
    private Button btnDashboard, btnUser, btnRecrutements, btnProjets, btnTransports,btnTaches,btnEquipe;
    @FXML
    private Button btnConges, btnAbsences, btnGestionConges, btnCandidats,btnEntretiens,btnTrajet,btnAb,btnTransport;


    @FXML
    private ImageView userIcon;
    public void setUserIcon(Image userIcon) {
        this.userIcon.setImage(userIcon);
    }

    @FXML
    private ImageView arrowIconConges;
    @FXML
    private ImageView arrowIconRecrutements;
    @FXML
    private ImageView arrowIconProjets;
    @FXML
    private ImageView arrowIconTransports;
    @FXML
    private Label username;
    @FXML
    private VBox sidebar, subMenuConges, subMenuRecrutements, subMenuProjets,subMenuTransport;
    @FXML
    private AnchorPane contentArea;
    @FXML
    private Pane subMenuContainer;
    @FXML
    private ScrollPane scrollSidebar;

    @FXML
    private ImageView logoImage;
    @FXML
    private ImageView logoutIcon; // Liaison avec l'ic√¥ne de d√©connexion

    private final UtilisateurService utilisateurService = new UtilisateurService();

    private boolean isSubMenuCongesVisible = false;
    private boolean isSubMenuRecrutementsVisible = false;
    private boolean isSubMenuProjetsVisible = false;
    private boolean isSubMenuTransportVisible = false;

    private List<Button> sidebarButtons;


    @FXML
    public void initialize() throws SQLException {
        Platform.runLater(() -> {
            loadView("/fxml/dashboardAdminRH.fxml");
            setActiveButton(btnDashboard);
        });


        sidebarButtons = List.of(btnDashboard, btnUser, btnRecrutements, btnProjets, btnTransports, btnConges
                , btnAbsences, btnCandidats, btnEntretiens,btnTrajet,btnAb,btnTransport);

        for (Button button : sidebarButtons) {
            button.setOnAction(event -> {
                setActiveButton(button);
                loadView(getFxmlPath(button));
            });
        }

        // Ajout des √©v√©nements de sous-menus
        btnGestionConges.setOnAction(event -> toggleSubMenuConges());
        btnRecrutements.setOnAction(event -> toggleSubMenuRecrutements());
        btnProjets.setOnAction(event -> toggleSubMenuProjets());
        btnTransports.setOnAction(event -> toggleSubMenuTransports());

        btnConges.setOnAction(event -> {
            setActiveButton(btnConges);
            loadView("/fxml/conges.fxml");
        });

        btnAbsences.setOnAction(event -> {
            setActiveButton(btnAbsences);
            loadView("/fxml/absences.fxml");
        });
        btnTaches.setOnAction(event -> {
            setActiveButton(btnTaches);
            loadView("/fxml/ListProjet.fxml");
        });
        btnEquipe.setOnAction(event -> {
            setActiveButton(btnEquipe);
            loadView("/fxml/ListTacheRH.fxml");
        });
        btnCandidats.setOnAction(event -> {
            setActiveButton(btnCandidats);
            loadView("/fxml/conges.fxml");
        });

        btnEntretiens.setOnAction(event -> {
            setActiveButton(btnEntretiens);
            loadView("/fxml/absences.fxml");
        });
        btnTransport.setOnAction(event -> {
            setActiveButton(btnTransport);
            loadView("/fxml/ListProjet.fxml");
        });
        btnTrajet.setOnAction(event -> {
            setActiveButton(btnTrajet);
            loadView("/fxml/ListTacheRH.fxml");
        });
        btnAb.setOnAction(event -> {
            setActiveButton(btnAb);
            loadView("/fxml/ListTacheRH.fxml");
        });

        username.setOnMouseClicked(event -> {
            try {
                // Deselect all sidebar buttons
                sidebarButtons.forEach(button -> button.getStyleClass().remove("active-button"));
                handleProfil();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        userIcon.setOnMouseClicked(event -> {
            try {
                // Deselect all sidebar buttons
                sidebarButtons.forEach(button -> button.getStyleClass().remove("active-button"));
                handleProfil();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
        //username.setText("Meriem Sassi");
        hideAllSubMenus();

        scrollSidebar.setFitToHeight(true);
        scrollSidebar.setFitToWidth(true);
        sidebar.setPrefHeight(Region.USE_COMPUTED_SIZE);

        // üîπ √âV√âNEMENT GLOBAL : Fermer les sous-menus si on clique en dehors
        contentArea.setOnMouseClicked(event -> closeAllSubMenus(event));

        scrollSidebar.setPrefWidth(330);
        sidebar.setPrefWidth(330);

        loadUserProfileImage();

        // R√©cup√©rer l'utilisateur connect√©
        Utilisateur utilisateur = SessionManager.getInstance().getUtilisateurConnecte();

        // Ensure the username label resizes to fit content
        username.setMaxWidth(Double.MAX_VALUE);
        username.setWrapText(true);


        // V√©rifier si un utilisateur est bien en session
        if (utilisateur != null) {
            // Afficher son pr√©nom et nom dans le Label
            username.setText(utilisateur.getFirstname() + " " + utilisateur.getLastname());

        } else {
            // Si aucun utilisateur, afficher un message par d√©faut
            username.setText("Utilisateur non connect√©");
        }

        // √©v√©nement de clic √† l'ic√¥ne de d√©connexion
        logoutIcon.setOnMouseClicked(event -> handleLogout());
        username.setOnMouseClicked(event -> {
            try {
                handleProfil();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
        userIcon.setOnMouseClicked(event -> {
            try {
                handleProfil();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
    }

    private void loadUserProfileImage() {
        Utilisateur utilisateur = SessionManager.getInstance().getUtilisateurConnecte();
        if (utilisateur == null) {
            System.out.println("‚ö† Aucun utilisateur connect√© !");
            return;
        }

        String imagePath = utilisateur.getProfilePhoto();
        Image profileImage;

        if (imagePath != null && !imagePath.isEmpty()) {
            if (imagePath.startsWith("http://") || imagePath.startsWith("https://")) {
                profileImage = new Image(imagePath, 50, 50, false, true);
            } else {
                File file = new File(imagePath);
                if (file.exists()) {
                    profileImage = new Image(file.toURI().toString(), 50, 50, false, true);
                } else {
                    profileImage = new Image(getClass().getResource("/images/profile.png").toExternalForm(), 50, 50, false, true);
                }
            }
        } else {
            profileImage = new Image(getClass().getResource("/images/profile.png").toExternalForm(), 50, 50, false, true);
        }

        // Appliquer un clip circulaire pour afficher l'image sous forme de cercle
        Platform.runLater(() -> {
            userIcon.setImage(profileImage);

            // Cr√©er un cercle pour d√©couper l'image
            Circle clip = new Circle();
            clip.setCenterX(userIcon.getFitWidth() / 2);
            clip.setCenterY(userIcon.getFitHeight() / 2);
            clip.setRadius(Math.min(userIcon.getFitWidth(), userIcon.getFitHeight()) / 2);

            userIcon.setClip(clip);
        });
    }

    /**
     * üîπ Ferme tous les sous-menus si le clic est en dehors
     */
    private void closeAllSubMenus(javafx.scene.input.MouseEvent event) {
        if (isSubMenuCongesVisible && !subMenuConges.getBoundsInParent().contains(event.getX(), event.getY())) {
            toggleSubMenuConges();
        }
        if (isSubMenuRecrutementsVisible && !subMenuRecrutements.getBoundsInParent().contains(event.getX(), event.getY())) {
            toggleSubMenuRecrutements();
        }
        if (isSubMenuProjetsVisible && !subMenuProjets.getBoundsInParent().contains(event.getX(), event.getY())) {
            toggleSubMenuProjets();
        }
        if (isSubMenuTransportVisible && !subMenuTransport.getBoundsInParent().contains(event.getX(), event.getY())) {
            toggleSubMenuTransports();
        }
    }


    /**
     * D√©finit le bouton actif (change la couleur de fond)
     */
    private void setActiveButton(Button selectedButton) {
        for (Button button : sidebarButtons) {
            button.getStyleClass().remove("selected");
        }
        selectedButton.getStyleClass().add("selected");
    }

    /**
     * Charge dynamiquement une vue dans le `contentArea`
     */
    private void loadView(String fxmlFile) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));
            Parent root = loader.load();
            contentArea.getChildren().setAll(root);

            // Ensure the view fills the content area
            AnchorPane.setTopAnchor(root, 0.0);
            AnchorPane.setRightAnchor(root, 0.0);
            AnchorPane.setBottomAnchor(root, 0.0);
            AnchorPane.setLeftAnchor(root, 0.0);
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("‚ö† Error loading: " + fxmlFile);
        }
    }

    /**
     * R√©cup√®re le bon FXML en fonction du bouton
     */
    private String getFxmlPath(Button button) {
        return switch (button.getId()) {
            case "btnDashboard" -> "/fxml/dashboardAdminRH.fxml";
            case "btnUser" -> "/fxml/listUsers.fxml";
            case "btnConges" -> "/fxml/conges.fxml";
            case "btnAbsences" -> "/fxml/absences.fxml";
            case "btnTaches" -> "/fxml/ListProjet.fxml";
            case "btnEquipe" -> "/fxml/ListTacheRH.fxml";
            case "btnCandidats" -> "/fxml/conges.fxml";
            case "btnEntretiens" -> "/fxml/absences.fxml";
            case "btnTransport", "btnTrajet", "btnAb" -> "/fxml/ListTacheRH.fxml";
            default -> null;
        };
    }

    /**
     * Animation pour basculer un sous-menu
     */
    private void toggleSubMenu(VBox subMenu, ImageView arrowIcon, boolean isVisible) {
        boolean newState = !isVisible; // Inverser l'√©tat actuel
        double targetHeight = newState ? 80 : 0; // Ajuste selon le nombre de boutons

        Timeline timeline = new Timeline(
                new KeyFrame(Duration.millis(200),
                        new KeyValue(subMenu.prefHeightProperty(), targetHeight),
                        new KeyValue(subMenu.opacityProperty(), newState ? 1 : 0)
                )
        );

        timeline.play();
        subMenu.setManaged(newState);
        subMenu.setVisible(newState);
        arrowIcon.setRotate(newState ? 90 : 0);
    }

    /**
     * Basculer le sous-menu Gestion Cong√©s
     */
    @FXML
    private void toggleSubMenuConges() {
        toggleSubMenu(subMenuConges, arrowIconConges, isSubMenuCongesVisible);
        isSubMenuCongesVisible = !isSubMenuCongesVisible;
    }

    /**
     * Basculer le sous-menu Recrutements
     */
    @FXML
    private void toggleSubMenuRecrutements() {
        toggleSubMenu(subMenuRecrutements, arrowIconRecrutements, isSubMenuRecrutementsVisible);
        isSubMenuRecrutementsVisible = !isSubMenuRecrutementsVisible;
    }

    /**
     * Basculer le sous-menu Projets
     */
    @FXML
    private void toggleSubMenuProjets() {
        toggleSubMenu(subMenuProjets, arrowIconProjets, isSubMenuProjetsVisible);
        isSubMenuProjetsVisible = !isSubMenuProjetsVisible;
    }

    @FXML
    private void toggleSubMenuTransports() {
        toggleSubMenu(subMenuTransport, arrowIconTransports, isSubMenuTransportVisible);
        isSubMenuTransportVisible = !isSubMenuTransportVisible;
    }

    /**
     * Cacher tous les sous-menus au d√©marrage
     */
    private void hideAllSubMenus() {
        subMenuConges.setVisible(false);
        subMenuConges.setManaged(false);
        subMenuRecrutements.setVisible(false);
        subMenuRecrutements.setManaged(false);
        subMenuProjets.setVisible(false);
        subMenuProjets.setManaged(false);
    }

    @FXML
    private void handleDashboard() {
        setActiveButton(btnDashboard);
        loadView("/fxml/dashboardAdminRH.fxml");
    }

    @FXML
    private void handleGestionUtilisateur() {
        setActiveButton(btnUser);
        loadView("/fxml/listUsers.fxml");
    }

    @FXML
    private void handleLogout() {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("D√©connexion");
        alert.setHeaderText("Confirmation");
        alert.setContentText("Voulez-vous vraiment vous d√©connecter ?");

        // Attendre la r√©ponse de l'utilisateur
        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            // Fermer la session
            SessionManager.getInstance().setUtilisateurConnecte(null);

            try {
                // Charger la sc√®ne de connexion
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/loginUser.fxml"));
                Parent root = loader.load();

                // R√©cup√©rer la sc√®ne actuelle et la remplacer par la sc√®ne de connexion
                Stage stage = (Stage) logoutIcon.getScene().getWindow();
                stage.setTitle("Connexion");

                // Cr√©er une nouvelle sc√®ne
                Scene scene = new Scene(root);

                // D√©finir une taille recommand√©e pour la fen√™tre
                root.setTranslateX(-200); // Start with 0 and adjust if needed
                root.setTranslateY(-170);

                // Centrer la fen√™tre sur l'√©cran
                stage.centerOnScreen();

                // D√©finir la nouvelle sc√®ne
                stage.setScene(scene);
                stage.show();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    @FXML
    private void handleProfil() throws IOException {
        // D√©s√©lectionner tous les boutons de la sidebar
        sidebarButtons.forEach(button -> button.getStyleClass().remove("active-button"));
        loadView("/fxml/employeeProfile.fxml");
    }

}
